image: eicweb.phy.anl.gov:4567/eic/juggler/juggler:$JUGGLER_TAG

default:
  before_script:
    - source .local/bin/env.sh
  tags:
    - phy-scratch
  artifacts:
    expire_in: 3 days
    paths:
      - .local/detector
      - .local/lib
      - .local/bin
      - .local/include
      - .local/share
      - .local/root_build
      - results
      - config
      - juggler.env
    reports:
      dotenv: juggler.env

stages:
  - status-pending
  - config
  - initialize
  - compile
  - generate
  - simulate
  - reconstruct
  - analyze
  - collect
  - finish
  - status-report

.status:
  before_script: []
  script:
    - |
      if [ -n "${GITHUB_SHA}" ] ; then
        curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${GITHUB_REPO_STATUS_TOKEN}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}" \
          -d '{"state":"'"${STATE}"'",
               "target_url":"'"${CI_PIPELINE_URL}"'",
               "description":"'"${DESCRIPTION}"'",
               "context":"eicweb/physics_benchmarks"
              }' ;
      fi

benchmarks:physics:pending:
  stage: status-pending
  extends: .status
  variables:
    STATE: "pending"
    DESCRIPTION: "The physics benchmarks are running..."
  when: always

common:setup:
  stage: config
  before_script:
    - |
      if [[ "${COMMON_BENCH_VERSION}" == "" ]] ; then
        export COMMON_BENCH_VERSION="master" 
      fi
      echo "COMMON_BENCH_VERSION = ${COMMON_BENCH_VERSION}" 
      git clone -b "${COMMON_BENCH_VERSION}" https://eicweb.phy.anl.gov/EIC/benchmarks/common_bench.git setup 
  script:
    - source setup/bin/env.sh && ./setup/bin/install_common.sh

common:detector:
  stage: initialize
  needs: ["common:setup"]
  script:
    - source .local/bin/env.sh && build_detector.sh
    - mkdir_local_data_link sim_output
    - mkdir_local_data_link datasets
    - mkdir -p results
    - mkdir -p config
    - print_env.sh

.compile_benchmark:
  needs:
    - ["common:setup"]
  before_script:
    - source .local/bin/env.sh  

.phy_benchmark:
  needs:
    - ["common:detector"]
  before_script:
    - source .local/bin/env.sh
    - ls -lrtha 
    - ln -s "${LOCAL_DATA_PATH}/sim_output" sim_output
    - ln -s "${LOCAL_DATA_PATH}/datasets/data" data
    - ls -lrtha
  retry:
    max: 2
    when:
      - runner_system_failure

include:
  - local: 'benchmarks/dis/config.yml'
    #- local: 'benchmarks/dvmp/config.yml'
  - local: 'benchmarks/dvcs/config.yml'
  - local: 'benchmarks/tcs/config.yml'
  - local: 'benchmarks/u_omega/config.yml'
  - local: 'benchmarks/single/config.yml'
  - local: 'benchmarks/backgrounds/config.yml'

summary:
  stage: finish
  needs:
    - "dis:results"
    - "dvcs:results"
    - "tcs:results"
    - "u_omega:results"
    - "single:results"
    - "backgrounds:results"
  script:
    - collect_benchmarks.py
  artifacts:
    paths:
      - results/*
#    reports:
#      junit: ["results/dvcs/report2.xml"]

benchmarks:physics:success:
  stage: status-report
  needs:
    - ["summary"]
  extends: .status
  variables:
    STATE: "success"
    DESCRIPTION: "The physics benchmarks succeeded!"
  when: on_success

benchmarks:physics:failure:
  stage: status-report
  needs:
    - ["summary"]
  extends: .status
  variables:
    STATE: "failure"
    DESCRIPTION: "The physics benchmarks failed!"
  when: on_failure
